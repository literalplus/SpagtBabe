From f1baa780761ea5e8fc9e254a0c2d4c7fe68a95fe Mon Sep 17 00:00:00 2001
From: xxyy <xxyy98@gmail.com>
Date: Mon, 24 Feb 2014 23:41:01 +0100
Subject: [PATCH] Fix reconnect spam please

---
 core/irc.py | 37 ++++++++++++++++++++++++-------------
 1 file changed, 24 insertions(+), 13 deletions(-)

diff --git a/core/irc.py b/core/irc.py
index e184fee..c9b5c8c 100644
--- a/core/irc.py
+++ b/core/irc.py
@@ -44,20 +44,21 @@ class crlf_tcp(object):
         return socket.socket(socket.AF_INET, socket.TCP_NODELAY)
 
     def run(self):
-        while True:
-            print 'Trying to connect to IRC..'
+        #while True:
+            print 'Trying to connect to '+self.host+':'+self.port+'..'
             try:
-                if self.socket.connect_ex((self.host, self.port)) == 0:
+                errnum = self.socket.connect_ex((self.host, self.port))
+                if errnum == 0:
                     thread.start_new_thread(self.recv_loop, ())
                     thread.start_new_thread(self.send_loop, ())
-                    print '(Re-)connected successfully.'
-                    break;
+                    print '(Re-)connected to '+self.host+':'+self.port+' successfully.'
+                    return
                 else:
-                    print 'Connection failed. Retrying in 10 seconds.'
-                    time.sleep(10)
+                    print 'Connection to '+self.host+':'+self.port+' failed. Retrying in 10 seconds. (err# '+errnum+')'
+                    time.sleep(10) #Stop and then try again
             except socket.error as err:
-                print 'Socket error occurred. Retrying in 10 seconds.', err
-                time.sleep(10)
+                print self.host+':'+self.port+': Socket error occurred. Retrying in 10 seconds.', err
+                time.sleep(10) #Stop and then try again
 
     def recv_from_socket(self, nbytes):
         return self.socket.recv(nbytes)
@@ -66,24 +67,31 @@ class crlf_tcp(object):
         return socket.timeout
 
     def handle_receive_exception(self, error, last_timestamp):
+        print(error)
         if time.time() - last_timestamp > self.timeout:
             self.iqueue.put(StopIteration)
             self.socket.close()
+            print("IRC timeout occurred for "+self.host+":"+self.port+" (also got an exception tho)")
             return True
         return False
 
     def recv_loop(self):
         last_timestamp = time.time()
+        curr_time = time.time()
         while True:
             try:
                 data = self.recv_from_socket(4096)
                 self.ibuffer += data
                 if data:
-                    last_timestamp = time.time()
+                    last_timestamp = curr_time
                 else:
-                    if time.time() - last_timestamp > self.timeout:
+                    if curr_time - last_timestamp > self.timeout:
+                        self.oqueue.put("PING :r u ded?")
+                        print("Semitimeout reached!")
+                    elif curr_time - last_timestamp > (self.timeout * 1.5):
                         self.iqueue.put(StopIteration)
                         self.socket.close()
+                        print("IRC timeout occurred for "+self.host+":"+self.port)
                         return
                     time.sleep(1)
             except (self.get_timeout_exception_type(), socket.error) as e:
@@ -124,6 +132,7 @@ class crlf_ssl_tcp(crlf_tcp):
         return SSLError
 
     def handle_receive_exception(self, error, last_timestamp):
+        print(error)
         # this is terrible
         if not "timed out" in error.args[0]:
             raise
@@ -148,6 +157,7 @@ class IRC(object):
         self.nick = nick
         self.history = {}
         self.vars = {}
+        self.waitstart = -1 #If > 0 denotes the time this connection sent a PING request to the IRC server. The connection will be re-established if no response is received after a timeout.
 
         self.out = Queue.Queue()  # responses from the server are placed here
         # format: [rawline, prefix, command, params,
@@ -174,9 +184,10 @@ class IRC(object):
             msg = self.conn.iqueue.get()
 
             if msg == StopIteration:
-                self.connect()
+                #self.connect()
+                self.waitstart = time.time()
+                self.cmd("PING", "ruded")
                 continue
-
             # parse the message
             if msg.startswith(":"):  # has a prefix
                 prefix, command, params = irc_prefix_rem(msg).groups()
-- 
1.8.3.msysgit.0

