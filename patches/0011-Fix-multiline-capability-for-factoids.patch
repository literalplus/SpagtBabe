From bb5770f8a91da16c5aeaed3823b14174cde313a4 Mon Sep 17 00:00:00 2001
From: xxyy <devnull@nowak-at.net>
Date: Mon, 14 Apr 2014 19:03:09 +0200
Subject: [PATCH 11/11] Fix multiline-capability for factoids

---
 plugins/factoids.py | 28 ++++++++++++++++++----------
 1 file changed, 18 insertions(+), 10 deletions(-)

diff --git a/plugins/factoids.py b/plugins/factoids.py
index cc5fb61..b5189d2 100644
--- a/plugins/factoids.py
+++ b/plugins/factoids.py
@@ -46,13 +46,14 @@ def remember(inp, nick='', db=None, notice=None, conn=None):
 
     append = False
 
-    inp = string.replace(inp, "\\n", "\n")
-
     try:
         word, data = inp.split(None, 1)
     except ValueError:
         return remember.__doc__
 
+    display_data = data
+    data = string.replace(data, "\\n", "\n")
+
     old_data = get_memory(db, word)
 
     if data.startswith('+') and old_data:
@@ -71,12 +72,12 @@ def remember(inp, nick='', db=None, notice=None, conn=None):
 
     if old_data:
         if append:
-            notice(u"Appending \x02{}\x02 to \x02{}\x02. Type ?{} to see it.".format(new_data, old_data, word))
+            notice(u"Appending \x02{}\x02 to \x02{}\x02. Type ?{} to see it.".format(display_data[1:], old_data, word))
         else:
-            notice(u'Remembering \x02{}\x02 for \x02{}\x02. Type ?{} to see it.'.format(data, word, word))
+            notice(u'Remembering \x02{}\x02 for \x02{}\x02. Type ?{} to see it.'.format(display_data, word, word))
             notice(u'Previous data was \x02{}\x02'.format(old_data))
     else:
-        notice(u'Remembering \x02{}\x02 for \x02{}\x02. Type ?{} to see it.'.format(data, word, word))
+        notice(u'Remembering \x02{}\x02 for \x02{}\x02. Type ?{} to see it.'.format(display_data, word, word))
 
 
 @hook.command("f", permissions=["delfactoid"])
@@ -149,19 +150,26 @@ def factoid(inp, message=None, db=None, bot=None, action=None, conn=None, input=
         result = text.multiword_replace(result, shortcodes)
 
         if result.startswith("<act>"):
-            result = result[5:].strip()
-            action(result)
+            result = result[5:]
+            for line in result.split("\n"):
+                action(line.strip())
         elif result.startswith("<url>"):
             url = result[5:].strip()
             try:
-                message(http.get(url))
+                message_multiline(http.get(url))
             except http.HttpError:
                 message("Could not fetch URL.")
         else:
             if prefix_on:
-                message(u"\x02[{}]:\x02 {}".format(factoid_id, result))
+                message_multiline(message, u"\x02[{}]:\x02 {}".format(factoid_id, result))
             else:
-                message(result)
+                message_multiline(message, result)
+
+
+def message_multiline(func_message, str_message):
+    for line in str_message.split("\n"):
+        func_message(line.strip())
+
 
 @hook.command(autoHelp=False, permissions=["listfactoids"])
 def listfactoids(inp, db=None, conn=None, reply=None):
-- 
2.1.2

